/* Auto-generated by genmsg_cpp for file /nishome/ocroomes/ros/rosbuild_ws/class-code/objectAvoidance/msg/Sonar.msg */
#ifndef OBJECTAVOIDANCE_MESSAGE_SONAR_H
#define OBJECTAVOIDANCE_MESSAGE_SONAR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace objectAvoidance
{
template <class ContainerAllocator>
struct Sonar_ {
  typedef Sonar_<ContainerAllocator> Type;

  Sonar_()
  : dist(0.0)
  {
  }

  Sonar_(const ContainerAllocator& _alloc)
  : dist(0.0)
  {
  }

  typedef float _dist_type;
  float dist;


  typedef boost::shared_ptr< ::objectAvoidance::Sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objectAvoidance::Sonar_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Sonar
typedef  ::objectAvoidance::Sonar_<std::allocator<void> > Sonar;

typedef boost::shared_ptr< ::objectAvoidance::Sonar> SonarPtr;
typedef boost::shared_ptr< ::objectAvoidance::Sonar const> SonarConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objectAvoidance::Sonar_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objectAvoidance::Sonar_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objectAvoidance

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objectAvoidance::Sonar_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objectAvoidance::Sonar_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objectAvoidance::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4cf5efb292b8e37e249bc3abe7cfd7b3";
  }

  static const char* value(const  ::objectAvoidance::Sonar_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4cf5efb292b8e37eULL;
  static const uint64_t static_value2 = 0x249bc3abe7cfd7b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::objectAvoidance::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objectAvoidance/Sonar";
  }

  static const char* value(const  ::objectAvoidance::Sonar_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objectAvoidance::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 dist\n\
\n\
";
  }

  static const char* value(const  ::objectAvoidance::Sonar_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::objectAvoidance::Sonar_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objectAvoidance::Sonar_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Sonar_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objectAvoidance::Sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objectAvoidance::Sonar_<ContainerAllocator> & v) 
  {
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJECTAVOIDANCE_MESSAGE_SONAR_H

